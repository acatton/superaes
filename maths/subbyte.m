% vim: set fileencoding=utf-8 expandtab tabstop=4

% Copyright (c) 2012, Antoine Catton and Jessy Mauclair-Richalet
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to
% deal in the Software without restriction, including without limitation the
% rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
% sell copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in
% all copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
% FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Values :                                                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   This values can be changed in order to change the size of the %
%   algorithm, or change constants.                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

galois_size = 16;

% This primitive polynomial correspond to D^16+D^13+D^11+D^7+D^5+D^3+1.
% It was chosen because there's lot of prime powers, and because
% prime numbers are good in cryptography.
% DISCLAIMER : In this context prime numbers doesn't guarantee
%              any improved security or whatsoever.
primitive_polynomial = 2**16 + 2**13 + 2**11 + 2**7 + 2**5 + 2**3 + 1;
% Primitive polynomial list can be found with :
%   octave> primpoly(galois_field_size, 'all')

% matrixes used in subbyte function.
% For reminder subbyte function does A * value + C 

% A matrix must be circulant. We used a base vector with each
% prime index at 1.
% We put 1 for the first index, otherwise it creates a singular
% matrix.
A_matrix = toeplitz([1 1 1 0 1 0 1 0 0 0 1 0 1 0 0 0], % Prime numbers vector
                    [1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 1]);



% C matrix was generated by :
%  bash$ head -c2 /dev/random
C_matrix = [1;1;0;1;1;0;0;0;0;0;0;1;0;0;1;0];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Computations :                                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   This code shouldn't be changed. It computes hardcoded values  %
%   in order to be used by your C program.                        %
%   This code should be only changed to fix bugs, or mathematical %
%   modelling errors                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function printvalues(galois_size, primitive_polynomial, galois_A_matrix, galois_C_matrix)
    hex_size = ceil(log2(galois_size));
    for value=0:((2**galois_size)-1)
        if (value ~= 0)
            printf(', ')
            if mod(value, galois_size) == 0
                printf('\n')
            end
        end
        vector = de2bi(value, galois_size);
        matrix = vector'; % transform to vertical vector
        galois_matrix = gf(matrix, galois_size, primitive_polynomial);
        galois_result = galois_A_matrix * galois_matrix + galois_C_matrix;
        bin_result = galois_result.x';
        result = bi2de(bin_result);

        printf('0x%s', dec2hex(result, hex_size));
    end
end


galois_A_matrix = gf(A_matrix, galois_size, primitive_polynomial);
galois_C_matrix = gf(C_matrix, galois_size, primitive_polynomial);

printf('subbytes_table[] = {\n')
printvalues(galois_size, primitive_polynomial, galois_A_matrix, galois_C_matrix)
printf('\n};\n')

inv_galois_A_matrix = ginv(galois_A_matrix);
inv_galois_C_matrix = inv_galois_A_matrix * galois_C_matrix;
printf('invsubbytes_table[] = {\n')
printvalues(galois_size, primitive_polynomial, inv_galois_A_matrix, inv_galois_C_matrix)
printf('\n};\n')
